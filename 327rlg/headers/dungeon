#ifndef DUNGEONCPP_H
#define DUNGEONCPP_H

#include <stdint.h>
#include <iostream>
#include <vector>
#include <string>
#include "../headers/mon_file_parser"
#include "../headers/item_file_parser"
#include "constants.h"
#include "map.h"
#include "path_finder.h"
#include "character"
#include "item"
#include "heap.h"
#include "gameio.h"



class Dungeon{
private:
  static Dungeon *d_instance;
  character_creator mc;
  item_creator ic;
  std::string display1;
  std::string display2;
  std::string message;
  pc *player;
  uint8_t selected;
  uint8_t floor_num;
  uint8_t mode;

  Dungeon(int nummon);
  Dungeon(FILE *f);
  Dungeon &operator=(Dungeon const&);
  Dungeon(Dungeon const&);


  class level{
  public:
    level(FILE *f);
    level(int nummon, int up_stairs);
    ~level();
    void save(FILE *f, character *p);
    uint8_t x;
    uint8_t y;
    uint8_t upstair[2];
    uint8_t downstair[2];
    uint8_t hardness[mapHeight][mapWidth];
    uint8_t visited[mapHeight][mapWidth];
    char chars[mapHeight][mapWidth];
    uint16_t distances[mapHeight][mapWidth];
    uint16_t distances_notun[mapHeight][mapWidth];
    uint16_t distances_intel[mapHeight][mapWidth];
    character *characters[mapHeight][mapWidth];
    item *items[mapHeight][mapWidth];
    room_t *rooms;
    uint8_t numRooms;
    uint32_t num_characters;
    int player_turn;
    level *upstairs;
    level *downstairs;
    heap *turn_order;
  };

  level *curlev;
  level *top;

public:

  ~Dungeon();

  static void load_instance(FILE *f);

  static Dungeon *get_instance(int nummon);

  static Dungeon *get_instance();

  inline void center_map(){
    curlev->x = player->x;
    curlev->y = player->y;
  }

  inline char &get_environment(int x, int y){
    return curlev->chars[y][x];
  }

  inline std::string &get_message(){
      return message;
  }

  inline heap_t *get_turns(){
    return curlev->turn_order;
  }

  inline uint8_t get_x(){
    return curlev->x;
  }

  inline uint8_t get_y(){
    return curlev->y;
  }

  inline uint8_t set_x(uint8_t a){
    curlev->x = a;
    return a;
  }

  inline uint8_t set_y(uint8_t a){
    curlev->y = a;
    return a;
  }

  Dungeon::level *get_top(){
    return this->top;
  }

  inline uint8_t get_mode(){
    return mode;
  }

  inline void set_mode(uint8_t mode){
    this->mode = mode;
  }

  inline uint8_t &get_hardness(int x, int y){
    return curlev->hardness[y][x];
  }

  inline uint8_t &visited(int x, int y){
    return curlev->visited[y][x];
  }

  uint16_t *get_distance_array(const unsigned int attrib){
    if(attrib & intelligent){
      if(attrib & tunneler)
        return *curlev->distances_intel;
      else
        return *curlev->distances_notun;
    }
    else{
      return *curlev->distances;
    }
  }

  int can_see_player(int x, int y){
    return can_see(curlev->hardness, player->x, player->y, x, y);
  }

  inline uint32_t get_num_characters(){
    return curlev->num_characters;
  }

  room_t *get_room(int i){
    if(i < curlev->numRooms && i <= 0){
      return curlev->rooms + i;
    }
    return NULL;
  }

  inline uint8_t &get_num_rooms(){
    return curlev->numRooms;
  }

  void save(FILE *f);

  char for_print(int x, int y);

  character *get_character(int x, int y);

  pc *get_player(){
    return player;
  }

  item *get_item(int x, int y){
    return curlev->items[y][x];
  }

  void set_item(int x, int y, item *it){
    curlev->items[y][x] = it;
  }

  void remove_item(int x, int y){
    if(curlev->items[y][x])
      delete curlev->items[y][x];
    curlev->items[y][x] = NULL;
  }

  void set_message(std::string a);

  void set_message(const char *c){
    message = c;
  }

  inline void set_display1(std::string a){
    display1 = a;
  }

  void set_display1(const char *c){
    display1 = c;
  }

  inline std::string &get_display1(){
    return display1;
  }

  inline void set_display2(std::string a){
    display2 = a;
  }
  void set_display2(const char *c){
    display2 = c;
  }

  inline std::string &get_display2(){
    return display2;
  }

  int get_life(){
    return player->hp;
  }

  void set_character(int x, int y, character *c);

  int go_upstairs();

  int visible(int x, int y);

  int go_downstairs();

  void calculate_distances();

  void fill_level(int up);

  void add_player(int up, int down);

  void show_map();

  void equip(int);

  void unequip(int);

  void drop(int);

  void destroy(int);

  void inventory(int);

  void equipment(int);

  item *get_equipment(int);

  uint8_t get_selected(){
    return selected;
  }

  uint8_t get_floor(){
    return this->floor_num;
  }

};




#endif
