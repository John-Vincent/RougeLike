#ifndef MFILEPARSECPP
#define MFILEPARSECPP

#include <string>
#include <vector>
#include "character"
#include "dice"

class monster_template{
private:
  std::string name;
  std::string desc;
  int color;
  dice *speed;
  char symb;
  int ability;
  dice *hp;
  dice *dam;
public:
  monster_template(){
    name = "";
    desc = "";
    color = 0;
    speed = hp = dam = NULL;
    symb = 0x00;
    ability = -1;
  }

  ~monster_template();

  int set_name(std::string n){
    name = n;
    return 0;
  };

  int set_desc(std::string d){
    desc = d;
    return 0;
  }

  int set_symb(char s){
    symb = s;
    return 0;
  }

  int set_color(std::string c){
    color = 0;
    if(c.find("RED") != std::string::npos){
      color = RED;
    } else if(c.find("YELLOW") != std::string::npos){
      color = YELLOW;
    } else if(c.find("MAGENTA") != std::string::npos){
      color = MAGENTA;
    } else if(c.find("CYAN") != std::string::npos){
      color = CYAN;
    } else if(c.find("BLUE") != std::string::npos){
      color = BLUE;
    }
    return 0;
  }

  int set_speed(int b, int d, int s){
    if(speed)
      delete speed;
    speed = new dice(b, d, s);
    if(speed){
      return 0;
    }
    return 1;
  }

  void set_ability(std::string a);

  int set_hp(int b, int d, int s){
    if(hp)
      delete hp;
    hp = new dice(b,d,s);
    if(hp){
      return 0;
    }
    return 1;
  }

  int set_damage(int b, int d, int s){
    if(dam)
      delete dam;
    dam = new dice(b,d,s);
    if(dam){
      return 0;
    }
    return 1;
  }

  inline const std::string get_name(){
    return name;
  }

  inline const std::string get_desc(){
    return desc;
  }

  inline const int get_color(){
    return color;
  }

  inline char get_symb(){
    return symb;
  }

  inline int get_speed(){
    if(!speed){
      return -1;
    }
    return speed->roll();
  }

  inline int get_ability(){
    return ability;
  }

  inline int get_hp(){
    if(!hp){
      return -1;
    }
    return hp->roll();
  }

  inline int get_dam(){
    if(!dam){
      return -1;
    }
    return dam->roll();
  }

  int is_set(){
    return (name != "" && desc != "" && color && speed && symb != 0x00 && ability != -1 && hp && dam);
  }

  void print_out();

  npc *generate(int gen);

};


class character_creator{
private:

  std::vector<monster_template*> list;

  int templates;

public:
  character_creator();

  ~character_creator();

  npc *get_monster(int gen);

  inline int get_num_templates(){
    return templates;
  }

  void print_out();

};

#endif
