#ifndef FILEPARSECPP
#define FILEPARSECPP

#include <string>
#include <sstream>
#include "character"


class dice{
private:
  int base;
  int num;
  int sides;
public:

  dice(){}

  dice(int b, int d, int s){
    base = b;
    num = d;
    sides = s;
  }

  ~dice(){}

  int roll(){
    return (rand() % sides) * num + base;
  }

  std::string to_string(){
    std::stringstream ss;
    ss << base << '+' << num << 'd' << sides;
    return ss.str();
  }
};

class monster_template{
private:
  std::string *name;
  std::string *desc;
  std::string *color;
  dice *speed;
  char symb;
  int ability;
  dice *hp;
  dice *dam;
public:
  monster_template(){
    name = desc = color = NULL;
    speed = hp = dam = NULL;
    symb = 0x00;
    ability = -1;
  }

  ~monster_template();

  int set_name(std::string n){
    if(name)
      delete name;
    name = new std::string(n);
    if(name){
      return 0;
    }
    return 1;
  };

  int set_desc(std::string d){
    if(desc)
      delete desc;
    desc = new std::string(d);
    if(desc){
      return 0;
    }
    return 1;
  }

  int set_symb(char s){
    symb = s;
    return 0;
  }

  int set_color(std::string c){
    if(color)
      delete color;
    color = new std::string(c);
    if(color){
      return 0;
    }
    return 1;
  }

  int set_speed(int b, int d, int s){
    if(speed)
      delete speed;
    speed = new dice(b, d, s);
    if(speed){
      return 0;
    }
    return 1;
  }

  void set_ability(std::string a);

  int set_hp(int b, int d, int s){
    if(hp)
      delete hp;
    hp = new dice(b,d,s);
    if(hp){
      return 0;
    }
    return 1;
  }

  int set_damage(int b, int d, int s){
    if(dam)
      delete dam;
    dam = new dice(b,d,s);
    if(dam){
      return 0;
    }
    return 1;
  }

  inline const std::string get_name(){
    return *name;
  }

  inline const std::string get_desc(){
    return *desc;
  }

  inline const std::string get_color(){
    return *color;
  }

  inline char get_symb(){
    return symb;
  }

  inline int get_speed(){
    if(!speed){
      return -1;
    }
    return speed->roll();
  }

  inline int get_ability(){
    return ability;
  }

  inline int get_hp(){
    if(!hp){
      return -1;
    }
    return hp->roll();
  }

  inline int get_dam(){
    if(!dam){
      return -1;
    }
    return dam->roll();
  }

  int is_set(){
    return (name && desc && color && speed && symb != 0x00 && ability != -1 && hp && dam);
  }

  void print_out();

};


class character_creator{
private:

  class template_holder{
  public:
    template_holder(monster_template *t){
      temp = t;
      next = NULL;
    }

    ~template_holder(){
      delete temp;
    }

    inline void print_out(){
      temp->print_out();
    }

    monster_template *temp;
    template_holder *next;
  };

  template_holder *head;

  int templates;

public:
  character_creator(){
    head = NULL;
    templates = 0;
  }

  ~character_creator();

  int add_template(monster_template *temp);

  monster_template *get_template(int x);

  int get_monster(int x, npc &n);

  inline int get_num_templates(){
    return templates;
  }

  void print_out();

};

character_creator *read_character_file();

#endif
