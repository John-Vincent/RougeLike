#ifndef HEAPCPP_H
#define HEAPCPP_H

#define swap(p, c, t)({                 \
  (t) = (p)->children;                  \
  (p)->children = (c)->children;        \
  (c)->children = t;                    \
  if((p)->parent){                      \
    if((p)->parent->child[0] == (p)){   \
      (p)->parent->child[0] = c;        \
    } else{                             \
      (p)->parent->child[1] = c;        \
    }                                   \
  }                                     \
  (c)->parent = (p)->parent;            \
  (p)->parent = (c);                    \
  if((p)->child[0] == (c)){             \
    (p)->child[0] = (c)->child[0];      \
    (c)->child[0] = (p)->child[1];      \
    (p)->child[1] = (c)->child[1];      \
    (c)->child[1] = (c)->child[0];      \
    (c)->child[0] = (p);                \
    if((c)->child[1]){                  \
      (c)->child[1]->parent = (c);      \
    }                                   \
  } else{                               \
    (p)->child[1] = (c)->child[1];      \
    (c)->child[1] = (p)->child[0];      \
    (p)->child[0] = (c)->child[0];      \
    (c)->child[0] = (c)->child[1];      \
    (c)->child[1] = (p);                \
    if((c)->child[0]){                  \
      (c)->child[0]->parent = (c);      \
    }                                   \
  }                                     \
  if((p)->child[0]){                    \
    (p)->child[0]->parent = (p);        \
  }                                     \
  if((p)->child[1]){                    \
    (p)->child[1]->parent = (p);        \
  }                                     \
})

template <class T>
class heap{
private:
  int size;
  void place_node(heap_node_t *h, heap_node_t *n){

  }
  class heap_node{
  public:
    heap_node(T *data){
      this->data = data;
    }
    ~heap_node(){}
    heap_node *parent;
    heap_node *child[2];
    uint32_t children;
    T *data;
  };

  heap_node *top;

public:

  T *pop(){
    heap_node_t *n, *c;
    uint32_t t;

    n = this->top;

    if(!n){
      return NULL;
    }
    void *ans = n->data;
    n->data = NULL;
    while(n->children){
      if(n->child[0] && n->child[1]){
        if(this->compare(n->child[0]->data, n->child[1]->data) > 0){
          c = n->child[0];
        } else{
          c = n->child[1];
        }
      } else if(n->child[0]){
        c = n->child[0];
      } else if(n->child[1]){
        c = n->child[1];
      }
      if(!(n->parent)){
        h->top = c;
      }
      swap(n, c, t);
      c->children--;
    }
    if(n->parent){
      if(n->parent->child[0] == n){
        n->parent->child[0] = NULL;
      } else{
        n->parent->child[1] = NULL;
      }
    } else{
      h->top = NULL;
    }
    free(n);
    return ans;
  }

  T *peek(){
    if(!this->top)
      return NULL;
    return this->top->data;
  }

  void update(heap_node *node);
  heap_node *insert(T data);


};


#endif
