#ifndef CPPCHARACTER
#define CPPCHARACTER


#include "constants.h"
#include <stdint.h>
#include <stdlib.h>
#include <string>
#include "dice"
#include "item"


class character{
  protected:
    int gen;
    std::string name;
    std::string desc;
  public:
    char sym;
    dice dam;
    int hp;
    int color;
    int speed;
    int next_turn;
    unsigned int attrib;
    int x;
    int y;
    inline const int get_gen() const{
      return gen;
    }
    virtual int take_turn(int input) = 0;
    virtual ~character(){}
    uint32_t is_dead(){
      return attrib == 0xffffffff;
    }
    int compare(const character &other) const;

    std::string get_name(){
      return name;
    }

    std::string get_desc(){
      return desc;
    }
};

class npc : public character{
  public:
    npc(std::string name, std::string desc, int gen, int speed, dice dam, int hp, char sym, int attrib, int color);
    ~npc(){}
    int take_turn(int input);
};

class pc : public character{
  public:
    pc();
    ~pc(){}
    int take_turn(int input);
};



int compare_characters(void *child, void *parent);


#endif
