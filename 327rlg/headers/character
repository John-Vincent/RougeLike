#ifndef CPPCHARACTER
#define CPPCHARACTER


#include "constants.h"
#include <stdint.h>
#include <stdlib.h>
#include <string>
#include "map.h"
#include "dice"
#include "item"


class character{
  protected:
    int gen;
    std::string name;
    std::string desc;
  public:
    char sym;
    dice dam;
    int hp;
    int color;
    int speed;
    int def;
    int dodge;
    int next_turn;
    unsigned int attrib;
    int x;
    int y;
    inline const int get_gen() const{
      return gen;
    }
    virtual int take_turn(int input) = 0;
    virtual ~character(){}
    uint32_t is_dead(){
      return attrib == 0xffffffff;
    }
    int compare(const character &other) const;

    std::string get_name(){
      return name;
    }

    std::string get_desc(){
      return desc;
    }

    virtual int get_def(){
      return def;
    }

    bool displace();

    virtual void save(FILE *f) = 0;
};

class npc : public character{
  public:
    npc(std::string name, std::string desc, int gen, int speed, dice dam, int hp, char sym, int attrib, int color);
    npc(FILE *f);
    ~npc(){}
    int take_turn(int input);
    void save(FILE *f);
};

class pc : public character{

public:
  item *bag[bag_size];
  item *equipment[equip_slots];

  pc(room_t *r, int num_rooms);
  pc(FILE *f);
  ~pc();
  int take_turn(int input);
  int equip(int);
  int unequip(int);
  std::string equip_name(int);
  int get_speed();
  int get_dam();
  int get_def();
  void save(FILE *f);
};



int compare_characters(void *child, void *parent);


#endif
